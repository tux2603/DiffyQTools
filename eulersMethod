#!/usr/bin/perl

# This program uses Euler's method to estimate the value of a first order ordinary differential equation
# Wriiten by Owen O'Connor (tux2603)

use POSIX qw/ceil/;

# Initial conditions as given in problem
print "Enter starting t value: ";
chomp(my $tStart = <>);
print "Enter starting y value: ";
chomp(my $yStart = <>);

# Value of t to solve for
print "\nEnter value of t to approximate y(t) for: ";
chomp(my $tEnd = <>);

# Step size of algorithm
print "Enter step size: ";
chomp(my $h = <>);

print "y' = ";
chomp(my $yPrime = <>);

# Differential function
sub f {
	my $t = shift;
	my $y = shift;
	return eval $yPrime;
}

# Calculate the number of steps needed to find the solution
my $numSteps = ceil(($tEnd - $tStart) / $h);

# Initialze an array to store the data
my @data;

# Load initial condistion into the hash
$data[0][0] = $tStart;
$data[0][1] = $yStart;

# Run the algorithm and populate the hash
for(1..$numSteps) {
	# Get the previous state
	my $lastT = $data[$_ - 1][0];
	my $lastY = $data[$_ - 1][1];

	# Get the current y value
	my $thisT = $tStart + $h * $_;

	# Calculate the corresponding t value
	my $thisY = $h * &f($lastT, $lastY) + $lastY;

	$data[$_][0] = $thisT;
	$data[$_][1] = $thisY;
}

my $dataString = "";

# Print out the values in the hash
for $i (@data) {
	print "y(@$i[0]) = @$i[1]\n";
	$dataString .= "@$i\\n";
}

# Display a nice pretty graph
`echo "$dataString" | gnuplot -p -e 'plot "-" with lines'`;



